module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateDay {
  count: Int!
}

type AggregateMeal {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Day {
  id: ID!
  name: String!
  meals(where: MealWhereInput, orderBy: MealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meal!]
}

type DayConnection {
  pageInfo: PageInfo!
  edges: [DayEdge]!
  aggregate: AggregateDay!
}

input DayCreateInput {
  name: String!
  meals: MealCreateManyInput
}

type DayEdge {
  node: Day!
  cursor: String!
}

enum DayOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DayPreviousValues {
  id: ID!
  name: String!
}

type DaySubscriptionPayload {
  mutation: MutationType!
  node: Day
  updatedFields: [String!]
  previousValues: DayPreviousValues
}

input DaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DayWhereInput
  AND: [DaySubscriptionWhereInput!]
  OR: [DaySubscriptionWhereInput!]
  NOT: [DaySubscriptionWhereInput!]
}

input DayUpdateInput {
  name: String
  meals: MealUpdateManyInput
}

input DayUpdateManyMutationInput {
  name: String
}

input DayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  meals_every: MealWhereInput
  meals_some: MealWhereInput
  meals_none: MealWhereInput
  AND: [DayWhereInput!]
  OR: [DayWhereInput!]
  NOT: [DayWhereInput!]
}

input DayWhereUniqueInput {
  id: ID
}

scalar Long

type Meal {
  id: ID!
  name: String!
}

type MealConnection {
  pageInfo: PageInfo!
  edges: [MealEdge]!
  aggregate: AggregateMeal!
}

input MealCreateInput {
  name: String!
}

input MealCreateManyInput {
  create: [MealCreateInput!]
  connect: [MealWhereUniqueInput!]
}

type MealEdge {
  node: Meal!
  cursor: String!
}

enum MealOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MealPreviousValues {
  id: ID!
  name: String!
}

input MealScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [MealScalarWhereInput!]
  OR: [MealScalarWhereInput!]
  NOT: [MealScalarWhereInput!]
}

type MealSubscriptionPayload {
  mutation: MutationType!
  node: Meal
  updatedFields: [String!]
  previousValues: MealPreviousValues
}

input MealSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MealWhereInput
  AND: [MealSubscriptionWhereInput!]
  OR: [MealSubscriptionWhereInput!]
  NOT: [MealSubscriptionWhereInput!]
}

input MealUpdateDataInput {
  name: String
}

input MealUpdateInput {
  name: String
}

input MealUpdateManyDataInput {
  name: String
}

input MealUpdateManyInput {
  create: [MealCreateInput!]
  update: [MealUpdateWithWhereUniqueNestedInput!]
  upsert: [MealUpsertWithWhereUniqueNestedInput!]
  delete: [MealWhereUniqueInput!]
  connect: [MealWhereUniqueInput!]
  set: [MealWhereUniqueInput!]
  disconnect: [MealWhereUniqueInput!]
  deleteMany: [MealScalarWhereInput!]
  updateMany: [MealUpdateManyWithWhereNestedInput!]
}

input MealUpdateManyMutationInput {
  name: String
}

input MealUpdateManyWithWhereNestedInput {
  where: MealScalarWhereInput!
  data: MealUpdateManyDataInput!
}

input MealUpdateWithWhereUniqueNestedInput {
  where: MealWhereUniqueInput!
  data: MealUpdateDataInput!
}

input MealUpsertWithWhereUniqueNestedInput {
  where: MealWhereUniqueInput!
  update: MealUpdateDataInput!
  create: MealCreateInput!
}

input MealWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [MealWhereInput!]
  OR: [MealWhereInput!]
  NOT: [MealWhereInput!]
}

input MealWhereUniqueInput {
  id: ID
}

type Mutation {
  createDay(data: DayCreateInput!): Day!
  updateDay(data: DayUpdateInput!, where: DayWhereUniqueInput!): Day
  updateManyDays(data: DayUpdateManyMutationInput!, where: DayWhereInput): BatchPayload!
  upsertDay(where: DayWhereUniqueInput!, create: DayCreateInput!, update: DayUpdateInput!): Day!
  deleteDay(where: DayWhereUniqueInput!): Day
  deleteManyDays(where: DayWhereInput): BatchPayload!
  createMeal(data: MealCreateInput!): Meal!
  updateMeal(data: MealUpdateInput!, where: MealWhereUniqueInput!): Meal
  updateManyMeals(data: MealUpdateManyMutationInput!, where: MealWhereInput): BatchPayload!
  upsertMeal(where: MealWhereUniqueInput!, create: MealCreateInput!, update: MealUpdateInput!): Meal!
  deleteMeal(where: MealWhereUniqueInput!): Meal
  deleteManyMeals(where: MealWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  day(where: DayWhereUniqueInput!): Day
  days(where: DayWhereInput, orderBy: DayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Day]!
  daysConnection(where: DayWhereInput, orderBy: DayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DayConnection!
  meal(where: MealWhereUniqueInput!): Meal
  meals(where: MealWhereInput, orderBy: MealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Meal]!
  mealsConnection(where: MealWhereInput, orderBy: MealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MealConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  day(where: DaySubscriptionWhereInput): DaySubscriptionPayload
  meal(where: MealSubscriptionWhereInput): MealSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    